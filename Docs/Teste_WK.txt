
Teste: 2022-10-19 a 2022-10-22, e refeito em 2022-10-28 e 2022-10-29

1. Banco de dados:

 PostgreSQL versão 15

Tabelas criada com script abaixo, utilizando, pgAdmin versão 6.14

------------------------------------------------------------------

-- Table: public.pessoa

-- DROP TABLE IF EXISTS public.pessoa;

CREATE TABLE IF NOT EXISTS public.pessoa
(	idpessoa bigserial NOT NULL,
	flnatureza int2 NOT NULL,
	dsdocumento varchar(20) NOT NULL,
	nmprimeiro varchar(100) NOT NULL,
	nmsegundo varchar(100) NOT NULL,
	dtregistro date NULL,
	CONSTRAINT pessoa_pk PRIMARY KEY (idpessoa)
)

ALTER TABLE IF EXISTS public.pessoa OWNER to postgres;

COMMENT ON TABLE public.pessoa IS 'teste WK';
	
------------------------------------------------------------------

-- Table: public.endereco

-- DROP TABLE IF EXISTS public.endereco;

CREATE TABLE endereco
(	idendereco bigserial NOT NULL,
	idpessoa int8 NOT NULL,
	dscep varchar(15) NULL,
	CONSTRAINT endereco_pk PRIMARY KEY (idendereco),
	CONSTRAINT endereco_fk_pessoa FOREIGN KEY (idpessoa)
	REFERENCES pessoa(idpessoa) ON DELETE cascade
);
CREATE INDEX endereco_idpessoa ON endereco (idpessoa);

ALTER TABLE IF EXISTS public.endereco OWNER to postgres;
	
COMMENT ON TABLE public.pessoa IS 'teste WK';
	
------------------------------------------------------------------

-- Table: public.endereco_integracao

-- DROP TABLE IF EXISTS public.endereco;

CREATE TABLE endereco_integracao
(	idendereco bigint NOT NULL,
	dsuf varchar(50) NULL,
	nmcidade varchar(100) NULL,
	nmbairro varchar(50) NULL,
	nmlogradouro varchar(100) NULL,
	dscomplemento varchar(100) NULL,
	CONSTRAINT enderecointegracao_pk PRIMARY KEY (idendereco),
	CONSTRAINT enderecointegracao_fk_endereco FOREIGN KEY (idendereco)
	REFERENCES endereco(idendereco) ON DELETE cascade
);

ALTER TABLE IF EXISTS public.endereco_integracao OWNER to postgres;
	
COMMENT ON TABLE public.endereco_integracao IS 'teste WK';
	
------------------------------------------------------------------------------------

2. Servidor DataSnap com API Rest

	
2.1 Endpoint GET: http://localhost:9000/datasnap/rest/TServerMethods/Pessoa/id 

Passando o "id" da pessoa, retorna:

{
    "result": [
        {
            "status": 200,
            "data": [
                {
                    "idpessoa": 68,
                    "flnatureza": "135",
                    "dsdocumento": "87582475824",
                    "nmprimeiro": "ZE",
                    "nmsegundo": "CARIOCA",
                    "dtregistro": "2022-10-28",
                    "idendereco": 0,
                    "dscep": "",
                    "dsuf": "",
                    "nmcidade": "",
                    "nmbairro": "",
                    "nmlogradouro": "",
                    "dscomplemento": ""
                }
            ],
            "sucess": true
        }
    ]
}

{"result":["{\"status\":200,\"data\":[{\"idpessoa\":31,\"flnatureza\":\"1\",\"dsdocumento\":\"000.000.1231-23\",\"nmprimeiro\":\"Maria\",\"nmsegundo\":\"Silva\",\"dtregistro\":\"2022-10-21\",\"idendereco\":9,\"dscep\":\"07092-080\",\"dsuf\":\"SP\",\"nmcidade\":\"Guarulhos\",\"nmbairro\":\"Gopo\u00FAva\",\"nmlogradouro\":\"Rua Capit\u00E3o Daniel Guedes\",\"dscomplemento\":\"\"}],\"sucess\":true}"]}

Em caso de erro ou não encontrado, retorna:

{
    "result": [
        {
            "status": 404,
            "sucess": false,
            "message": "not found"
        }
    ]
}


2.2 Endpoint POST: http://localhost:9000/datasnap/rest/TServerMethods/Pessoa
  
*** Consulta viacep.com.br/ws/_numero_CEP/json, para obter dados do endereço.
 
Passando um json com os dados a cadastrar:

{
    "flnatureza":7,
    "dsdocumento":"99.999.999/9999-99",
    "nmprimeiro":"Alan",
    "nmsegundo":"Turing",
    "cep":"07092070"
}

Retorna:

{
    "result": [
        {
            "status": 201,
            "sucess": true,
            "idpessoa": 73,
            "idendereco": 42
        }
    ]
}

Em caso de erro, informa o erro encontrado:

{
    "result": [
        {
            "status": 400,
            "sucess": false,
            "message": "campo 'cep' inválido"
        }
    ]
}


2.3 Endpoint PUT: http://localhost:9000/datasnap/rest/TServerMethods/Pessoa/id

*** Consulta viacep.com.br/ws/_numero_CEP/json, para obter dados do endereço.

Passando um json com os dados para alterar:

{
    "idpessoa":73,
    "flnatureza":7,
    "dsdocumento":"99.999.999/9999-99",
    "nmprimeiro":"Alan",
    "nmsegundo":"Turing",
    "cep":"07092010"
}

Retorna:

{
    "result": [
        {
            "status": 200,
            "sucess": true
        }
    ]
}


Em caso de erro, informa o erro encontrado:

{
    "result": [
        {
            "status": 400,
            "sucess": false,
            "message": "campo 'cep' inválido"
        }
    ]
}


2.4 Endpoint DELETE: http://localhost:9000/datasnap/rest/TServerMethods/Pessoa/id

passando o "id" da pessoa, retorna:

{
    "result": [
        {
            "status": 200,
            "sucess": true,
            "message": "registro apagado"
        }
    ]
}


3. Desktop:

Aplicação que permite:

	- Cadastrar
	- Alterar
	- Excluir
	- Pesquisar, por id	
	- Processamento em Lote de arquivo CSV, gera arquivo
	  de saida com itens não carrgados ou com erro.
	  Nome do arquivo gerado: nome_original + .invalidos
	- Threads, para atualização em lote (pendente)

